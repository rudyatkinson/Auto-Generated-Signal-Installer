using System;
using System.IO;
using System.Text;
using UnityEditor;
using UnityEngine;

namespace RudyAtkinson.GenerateCode
{
    [InitializeOnLoad]
    public static class SignalInstallerCodeGeneration
    {
        static SignalInstallerCodeGeneration()
        {
            var settings = SignalInstallerCodeGenerationSettings.GetSettingsFromResources();
            
            if (!settings.GenerateSignalInstallerAtCompile)
            {
                return;
            }
            
            FindSignalsAndGenerateCode(settings);
        }
        
        public static void FindSignalsAndGenerateCode(AGSISettings settings)
        {
            var install = SetSpace(2) + "SignalBusInstaller.Install(Container);";

            var targetInterface = typeof(IAutoGeneratedSignal);
            var assemblies = AppDomain.CurrentDomain.GetAssemblies();

            var namespaceBuilder = new StringBuilder();
            namespaceBuilder.Append("using Zenject;\n"); 

            var declareSignalBuilder = new StringBuilder();
            foreach (var assembly in assemblies)
            {
                try
                {
                    Type[] types = assembly.GetTypes();

                    foreach (Type type in types)
                    {
                        if (type.IsInterface || !targetInterface.IsAssignableFrom(type))
                            continue;

                        declareSignalBuilder.Append(SetSpace(2));
                        declareSignalBuilder.Append("Container.DeclareSignal<");
                        declareSignalBuilder.Append(type.Name);
                        declareSignalBuilder.Append(">();\n");

                        if (!namespaceBuilder.ToString().Contains(type.Namespace))
                        {
                            namespaceBuilder.Append($"using {type.Namespace};\n");
                        }
                        
                        Debug.Log($"Class '{type.Name}' found and added into {settings.InstallerClassName}");
                    }
                }
                catch (Exception)
                {
                    continue;
                }
            }
            
            string classContent = 
                $"{namespaceBuilder}\npublic class {settings.InstallerClassName} : MonoInstaller \n{{ \n{SetSpace()}public override void InstallBindings()\n{SetSpace()}{{\n{install}\n{declareSignalBuilder}{SetSpace()}}}\n}}";

            string filePath = Path.Combine(Application.dataPath, settings.InstallerPath + settings.InstallerClassName + ".cs");
            Directory.CreateDirectory(Path.GetDirectoryName(filePath));
            File.WriteAllText(filePath, classContent);
            
            AssetDatabase.Refresh();
            
            Debug.Log($"Signal Installer Generated At Compile");
        }
        
        static string SetSpace(int nTimes = 1)
        {
            return new string(' ', 5 * nTimes);
        }
    }
}