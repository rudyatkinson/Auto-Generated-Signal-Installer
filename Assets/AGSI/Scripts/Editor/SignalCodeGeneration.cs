using System;
using System.IO;
using System.Text;
using UnityEditor;
using UnityEngine;

namespace RudyAtkinson.GenerateCode
{
    public class SignalCodeGeneration : EditorWindow
    {
        private static string _installerClassName = "AutoGeneratedSignalInstaller";
        private static string _filePath = "../Assets/Installer/";
        
        [MenuItem("Tools/RudyAtkinson/Signal Generator")]
        public static void OpenWindow()
        {
            GetWindow<SignalCodeGeneration>("Signal Generator").Show();
        }

        private void OnGUI()
        {
            _installerClassName = EditorGUILayout.TextField("Signal Installer Class Name:", _installerClassName);
            _filePath = EditorGUILayout.TextField("Signal Installer Path:", _filePath);
            
            if (GUILayout.Button("Find Signals and Generate Code"))
            {
                FindSignalsAndGenerateCode();
            }
        }
        
        static void FindSignalsAndGenerateCode()
        {
            var install = SetSpace(2) + "SignalBusInstaller.Install(Container);";

            var targetInterface = typeof(IAutoGeneratedSignal);
            var assemblies = AppDomain.CurrentDomain.GetAssemblies();

            var namespaceBuilder = new StringBuilder();
            namespaceBuilder.Append("using Zenject;\n"); 

            var declareSignalBuilder = new StringBuilder();
            foreach (var assembly in assemblies)
            {
                try
                {
                    Type[] types = assembly.GetTypes();

                    foreach (Type type in types)
                    {
                        if (type.IsInterface || !targetInterface.IsAssignableFrom(type))
                            continue;

                        declareSignalBuilder.Append(SetSpace(2));
                        declareSignalBuilder.Append("Container.DeclareSignal<");
                        declareSignalBuilder.Append(type.Name);
                        declareSignalBuilder.Append(">();\n");

                        if (!namespaceBuilder.ToString().Contains(type.Namespace))
                        {
                            namespaceBuilder.Append($"using {type.Namespace};\n");
                        }
                        
                        Debug.Log($"Class '{type.Name}' found and added into {_installerClassName}");
                    }
                }
                catch (Exception e)
                {
                    continue;
                }
            }
            
            string classContent = 
                $"{namespaceBuilder}\npublic class {_installerClassName} : MonoInstaller \n{{ \n{SetSpace()}public override void InstallBindings()\n{SetSpace()}{{\n{install}\n{declareSignalBuilder}{SetSpace()}}}\n}}";

            string filePath = Path.Combine(Application.dataPath, _filePath + _installerClassName + ".cs");
            Directory.CreateDirectory(Path.GetDirectoryName(filePath));
            File.WriteAllText(filePath, classContent);
            
            AssetDatabase.Refresh();
        }

        static string SetSpace(int nTimes = 1)
        {
            return new string(' ', 5 * nTimes);
        }
    }
}